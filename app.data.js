module.exports = [
  {"filepath":"pages/01.index.md","title":"React Native Reanimated","description":"","link":"index","data":"# React Native Reanimated\n\nReact Native's Animated library reimplemented.\n\n- **Native Performance**: Declare your animations in JS, but have them run on the native thread! 🧙‍♂️\n- **Precise Animations**: The API affords new levels of precision and detailed control of your animations. 🕹\n- **(mostly) Backwards Compatible**: Use the same Animated API from React Native that you've been using. You generally don't _need_ to change anything to get started. 👍\n\nReanimated provides a more comprehensive, low level abstraction for the Animated library API, giving you much greater flexibility, control and performance. Combine it with [react-native-gesture-handler](https://github.com/kmagiera/react-native-gesture-handler) for performant gesture-based interactions.\n\n## Want to contribute?\n\nHead over right [there](https://github.com/software-mansion/react-native-reanimated), we are open for your pull requests!\n\n## License\n\nReact native reanimated library is licensed under [The MIT License](https://github.com/software-mansion/react-native-reanimated/blob/master/LICENSE).\n\n## Credits\n\nThis project is supported by amazing people from [Expo.io](https://expo.io) and [Software Mansion](https://swmansion.com)\n\n[![expo](https://avatars2.githubusercontent.com/u/12504344?v=3&s=100 'Expo.io')](https://expo.io)\n[![swm](https://avatars0.githubusercontent.com/u/56880679?v=3&s=100 'Software Mansion')](https://swmansion.com)\n","type":"md","dependencies":[]},{"filepath":"pages/02.about.md","title":"About Reanimated","description":"","link":"about-reanimated","data":"# Motivation\n\n---\n\n`Animated` library has several limitations that become troubling when it comes to gesture based interactions.\nThis project was initially created to resolve the issue of pan interaction when the object can be dragged along the screen and when released it should snap to some place on the screen.\nThe problem was that despite using `Animated.event` and mapping gesture state to the position of the box, and making this whole interaction run on UI thread with `useNativeDriver` flag, we still had to call back into JS at the end of the gesture for us to start \"snap\" animation.\nThis is because `Animated.spring({}).start()` cannot be used in a \"declarative\" manner, because when it gets executed it has a \"side effect\" of starting a process (an animation) that updates the value for some time.\nAdding \"side effect\" nodes into the current Animated implementation turned out to be a pretty difficult task as the execution model of the Animated API runs all the dependent nodes of each frame for the views that need to update.\nWe don't want to run \"side effects\" more often than necessary as it would, for example, result in the animation starting multiple times.\n\nAnother inspiration to redesigning the internals of `Animated` was Krzysztof's work on porting \"Animated Tracking\" functionality to the native driver.\nApparently, even though the native driver is out for quite a while, it still does not support all the things non-native `Animated` lib can do.\nObviously, it is far more difficult to build three versions of each feature (JS, Android and iOS) instead of one, and the same applies for fixing bugs.\nOne of the goals of `react-native-reanimated` was to provide a more generic building block for the API that would allow for building more complex features only in JS and make the native codebase as minimal as possible.\nTaking \"diffClamp\" node as an example, it is currently implemented in three different places in `Animated` core and even though it is pretty useful it actually only has one use case (collapsible scrollview header).\n\nOn a similar topic, there's React Native's PR [#18029](https://github.com/facebook/react-native/pull/18029) and even though it provides a legitimate use case, maintainers are hesitant about merging it. The `Animated` API shouldn't block people from building things like this and the goal of `react-native-reanimated` is to provide lower level access that would allow for implementing that and many more features with no necessary changes to the core of the library.\n\nYou can watch Krzysztof Magiera's [React Europe talk](https://www.youtube.com/watch?v=kdq4z2708VM) where he explains the motivation.\n\nThe goals:\n\n- More generic primitive node types leading to more code reuse for the library internals therefore making it easier to add new features and fix bugs.\n- The new set of base nodes can be used to implement `Animated` compatible API including:\n  - Complex nodes such as “diffClamp”.\n  - Interactions such as animated value tracking or animation staggering.\n- Conditional evaluation & nodes with side effects (`set`, `startClock`, `stopClock`).\n- No more “useNativeDriver” – all animations runs on the UI thread by default\n\n# Reanimated overview\n\nWe aim to bring this project to be fully compatible with `Animated` API. We believe that the set of base nodes we have selected should make this possible to be done only by writing JS code and does not require significant changes in the native codebases. Here is a list of things that haven't yet been ported from the original version of `Animated` library.\nAll the functionality that missing elements provide in `Animated` can already be achieved with `react-native-reanimated` although a different methodology for implementing those may be required (e.g. check [\"Declarative Animation API\" section](declarative-animation-api.html) to see how the implementation may differ).\n\n- [ ] using value offsets\n- [ ] value tracking (can be achieved in different way, `react-native-reanimated` also allows for tracking all the animation parameters not only destination params)\n- [ ] animation staggering\n- [ ] animation delays\n\n# At most once evaluation (the algorithm)\n\nUnlike the original `Animated` library where each node could have been evaluated many times within a single frame, `react-native-reanimated` restricts each node to be evaluated at most once in a frame.\nThis restriction is required for nodes that have side-effects to be used (e.g. [`set`](set.html) or [`startClock`](start-clock.html)).\nWhen node is evaluated (e.g. in case of an [`add`](add.html) node we want to get a sum of the input nodes) its value is cached. If within the next frame there are other nodes that want to use the output of that node instead of evaluating we return cached value.\nThis notion also helps with performance as we can try to evaluate as few nodes as expected.\nThe current algorithm for making decisions of which nodes to evaluate works as follows:\n\n1.  For each frame we first analyze the generated events (e.g. touch stream). It is possible that events may update some animated values.\n2.  Then we update values that correspond to [clock](clock-and-the-algorithm.html) nodes that are \"running\".\n3.  We traverse the node's tree starting from the nodes that have been updated in the current cycle and we look for final nodes that are connected to views.\n4.  If we found nodes connected to view properties we evaluate them. This can recursively trigger an evaluation for their input nodes etc.\n5.  After everything is done we check if some \"running\" clocks exists. If so we enqueue a callback to be evaluated with the next frame and start over from pt 1. Otherwise we do nothing.\n\n# 100% declarative gesture interactions\n\n`react-native-reanimated` works best with the [Gesture Handler](https://kmagiera.github.io/react-native-gesture-handler) \nlibrary. Currently all the examples are made using that library, including the ultimate \n[ImagePreview app](https://github.com/software-mansion/react-native-reanimated/blob/master/Example/src/imageViewer).\n","type":"md","dependencies":[]},{"filepath":"pages/03.start.md","title":"Getting Started","description":"","link":"getting-started","data":"# Getting started\n\n---\n\nBefore you get started you should definitely familiarize yourself with the original [Animated API](https://facebook.github.io/react-native/docs/animated.html). It will do you well to be comfortable with how animations are generally done in `Animated`. (Fun Fact: Reanimated is also backwards compatible with the `Animated API`. 🙌)\n\nRefer to the [Motivation](about-reanimated.html#Motivation---OMG,-why-would-you-build-this?) section to understand why this library exists\n\nNOTE: Throughout this document when we refer to classes or methods prefixed with `Animated` we are referring to them being imported from `react-native-reanimated` package instead of plain `react-native`, unless otherwise stated.\n\n## Installation\n\nI. First install the library from npm repository using `yarn`:\n\n```bash\n  yarn add react-native-reanimated\n```\n\nII. Link native code with `react-native` cli:\n\n```bash\n  react-native link react-native-reanimated\n```\n\nIII. For iOS, go to `ios` folder and run `pod install`:\n\n```bash\n  cd ios\n  pod install\n```\n\nIV. When you want to use \"reanimated\" in your project import it from the `react-native-reanimated` package:\n\n```js\nimport Animated from 'react-native-reanimated';\n```\n\nSimilarly when you need `Easing` import it from the `react-native-reanimated` package instead of `react-native`:\n\n```js\nimport Animated, { Easing } from 'react-native-reanimated';\n```\n\n## Testing\n\nIn order to use `react-native-reanimated` with Jest, you need to add the following mock implementation at the top of your test:\n\n```js\njest.mock('react-native-reanimated', () => require('react-native-reanimated/mock'));\n```\n","type":"md","dependencies":[]},{"filepath":"pages/04.transitions.md","title":"Transitions","description":"","link":"transitions","data":"# Transitions\n\n---\n\nTransitions is an experimental API distributed as a part of reanimated which serves the purpose of animating between two states of view hierarchy. It is conceptually similar to `LayoutAnimation` concept from react native but gives much better control of what and how is going to be animated.\n\nTransitions API consists of two main building blocks. First one being `Transitioning.View` which is an extension of regular react-native view, so you can use any `View` props you'd like. The `Transitioning.View` is a root of all the transition animations that will be happening and is used to scope the changes to its children. In order to have next transition animated you'd need to call `animateNextTransition()` on the `Transitioning.View` instance.\n\nThe second main building block is transition definition. Transitioning API uses JSX syntax that allows you to define how the transition animation should perform. You can use all the components from `Transition` object to combine the animation you want. Please see the below list for the documentation of transition components.\n\n## Transition groups\n\nThe below set of components can be used to group one or more transitions. You can also nest transition groups in order to achieve desirable effects.\n\n### `<Transition.Together>`\n\nTransitions nested under this component will run in parallel when the animation starts.\n\n### `<Transition.Sequence>`\n\nTransitions nested under this component will run in sequence in the order at which they are listed\n\n## Transitions\n\nTransition components can be used separately or as a part of a group. Each transition component has the following common properties you can use to configure the animation:\n\n#### `durationMs`\n\nThe time animation takes to execute in milliseconds\n\n#### `delayMs`\n\nUse this if you want the animation to start delayed (value in milliseconds)\n\n#### `interpolation`\n\nSpecify the transition timing curve. Possible values are: `linear`, `easeIn`, `easeOut`, `easeInOut`\n\n#### `propagation`\n\nAllows for the framework to automatically delay beginning of transitions across a set of different views depending on their position. The possible values are `top`, `bottom`, `left` and `right`. When `propagation=\"top\"` it means that the first element that will start animating is the one that is closest to the top of `Transitioning.View` container, then the other views will be delayed by the amount which depends on their distance from the top edge.\n\n### `<Transition.In>`\n\nAllows to specify how views that get mounted during animation transition get animated. In addition to the above parameters you can specify the type of animation using `type` prop. The possible values are: `fade`, `scale`, `slide-top`, `slide-bottom`, `slide-left`, `slide-right`.\n\n### `<Transition.Out>`\n\nAllows to specify how the framework should animate views that are being removed during transition. In addition to the above parameters you can specify the type of animation using `type` prop. The possible values are: `fade`, `scale`, `slide-top`, `slide-bottom`, `slide-left`, `slide-right`.\n\n### `<Transition.Change>`\n\nUse `Transition.Change` component to specify how components' which properties get changed during transition should be animated. The framework currently supports an animating position, bounds and transforms.\n\n## How to use it\n\nThis API is still experimental and is a subject to change. Please refer to our [Example app](https://github.com/software-mansion/react-native-reanimated/tree/master/Example/src/transitions) to see how it can be used in practice in the current shape.\n","type":"md","dependencies":[]},{"filepath":"pages/05.value.md","title":"Value","description":"","link":"value","data":"# Value\n\n---\n\n`Animated.Value` is a container for storing values. It's is initialized with `new Value(0)` constructor. For backward compatibility there are provided API for setting value after it has been initialized:\n\n```js\nconst v = new Value(0);\n/// ...\nv.setValue(100);\n```\n\nWhile using `Animated.Value` in functional components it's recommended that one should wrap instantiation with `useRef(...)` or `useMemo(...)` to use the same instance on re-render, or just simply use `useValue` hook:\n\n```js\nconst v = useValue(0);\n/// ...\nv.setValue(100);\n```\n","type":"md","dependencies":[]},{"filepath":"pages/06.clock.md","title":"Clock and the algorithm","description":"","link":"clock-and-the-algorithm","data":"# Clocks\n\n---\n\nOriginal `Animated` API makes an \"animation\" object a first class citizen.\n`Animation` object has many features and therefore requires quite a few JS<>Native bridge methods to be managed properly.\nIn `react-native-reanimated`, clocks aim to replace that by providing more of a low level abstraction but also since clock nodes behave much like the animated values they make the implementation much less complex.\n\n`Animated.Clock` node is a special type of `Animated.Value` that can be updated in each frame to the timestamp of the current frame. When we take `Clock` node as an input, the value it returns is the current frame timestamp in milliseconds. Using special methods, clock nodes can be stopped and started and we can also test if clock has been started.\n\nBecause `Animated.Clock` just extends the `Animated.Value` you can use it in the same places (operations) where you can pass any type of animated node.\n","type":"md","dependencies":[]},{"filepath":"pages/07.block.md","title":"Block","description":"","link":"block","data":"# Blocks\n\n---\n\nBlocks are just arrays of nodes that are being evaluated in a particular order and return the value of the last node. It can be created using `block` command but also when passed as an argument to other nodes the `block` command can be omitted and we can just pass a nodes array directly. See an example below:\n\n```js\nblock(\n  set(tmp, a), \n  set(a, b), \n  set(b, tmp)\n);\n```\n\nPassing array directly is equivalent to wrapping it with the `block` command.\n","type":"md","dependencies":[]},{"filepath":"pages/08.view.md","title":"Views, props, etc","description":"","link":"views--props--etc","data":"# Views, props, etc\n\n---\n\nFollow the original `Animated` library guides to learn how values can be connected to View attributes.\nSimilarly with `react-native-reanimated` you need to use components prefixed with `Animated.` (remember to [import](getting-started.html#installation) `Animated` from reanimated package). For example:\n\n```js\nimport Animated from 'react-native-reanimated';\n\n// use\n<Animated.View/>\n// instead of\n<View/>\n```\n","type":"md","dependencies":[]},{"filepath":"pages/09.code.md","title":"Animated.Code","description":"","link":"animated-code","data":"# `Animated.Code`\n\n---\n\n`Animated.Code` component allows you to define reanimated nodes that you want to execute when their input nodes updates, but aren't necessarily strictly related to some view properties and hence it does not feel right to place them under `translate` or other prop of an `Animated.View`. This component renders `null`, so you can place it in any place you want in your render method. It is required that your code is put inside component as we rely on `componentDidMount` and `componentWillUnmount` callbacks to install and cleanup animated nodes. Note that the code you put is going to be executed only once. We currently have no way of telling if your code changes and so it will only be run in `componentDidMount`. If you wish for your reanimated nodes to be updated when the component updates, you can update the `key` property of the `Animated.Code` component, which will effectively unmount old and mount new versions of it in the React tree.\n\n```js\n<Animated.Code>\n  {() =>\n    block([\n      set(this.transX1, add(multiply(-1, this._transX))),\n      set(this.transX2, add(multiply(-2, this._transX), 120)),\n      set(this.transX3, sub(multiply(2, this._transX), 120)),\n      set(this.transX4, add(multiply(1, this._transX))),\n    ])\n  }\n</Animated.Code>\n```\n\nor:\n\n```js\n<Animated.Code\n  exec={block([\n    set(this.transX1, add(multiply(-1, this._transX))),\n    set(this.transX2, add(multiply(-2, this._transX), 120)),\n    set(this.transX3, sub(multiply(2, this._transX), 120)),\n    set(this.transX4, add(multiply(1, this._transX))),\n  ])}\n/>\n```\n\n## `Animated.useCode`\n\nThe `useCode` hook acts as an alternative to the `Animated.Code` component.\n\n```js\nAnimated.useCode(\n    () => Node | Node[] | boolean | null | undefined, \n    [...dependencies]\n)\n```\n\nIt's passed as 1st parameter a factory function that should return an optional animated node, or array of nodes (which will be then placed in a `block` node), and as 2nd parameter, an array of dependencies. It will update that node, both when the component mounts and every time a value in that array changes. It does nothing on versions of React Native that don't support hooks (<0.59).\n\n```js\nconst [animated, setAnimated] = React.useState(false);\nconst [offset, setOffset] = React.useState(20);\n\nAnimated.useCode(\n    () => (\n          animated && [\n              //...\n              set(transX1, add(_transX, offset))\n          ]\n    ), \n    [animated, offset]\n);\n```\n\nWe recommend to use `useCode()` with the `react-hooks/exhaustive-deps` [eslint rule](https://www.npmjs.com/package/eslint-plugin-react-hooks).\n","type":"md","dependencies":[]},{"filepath":"pages/10.event.md","title":"Event handling with reanimated nodes","description":"","link":"event-handling-with-reanimated-nodes","data":"# Event handling with reanimated nodes\n\n---\n\n`react-native-reanimated`'s new syntax is possible to be used with `Animated.event`. Instead of providing only a mapping from event fields to animated nodes, it is allowed to write a function that takes reanimated values map as an input and return a block (or any other reanimated function) that will be then used to handle the event.\n\nThis syntax allows for providing some post-processing for the event data that does not fit well as a dependency of other nodes we connect to `Animated.View` component props.\n[See example](https://github.com/software-mansion/react-native-reanimated/blob/master/Example/src/PanRotateAndZoom/index.js)\n\n```js\nthis.onGestureEvent = event([\n  {\n    nativeEvent: {\n      translationX: x => set(this._x, x),\n    },\n  },\n]);\n```\n\nIf you'd like to use more than one event attribute in your reanimated code, this is also supported. Instead of defining event handler methods for a single attribute you can define at the level of `nativeEvent`. Here is an example that takes both translation attributes and state attribute from `PanGestureHandler` event:\n\n```js\n<PanGestureHandler\n  onGestureEvent={event([\n    {\n      nativeEvent: ({ translationX: x, translationY: y, state }) =>\n        block([\n          set(this._transX, add(x, offsetX)),\n          set(this._transY, add(y, offsetY)),\n          cond(eq(state, State.END), [\n            set(this.offsetX, add(this.offsetX, x)),\n            set(this.offsetY, add(this.offsetY, y)),\n          ]),\n        ]),\n    },\n  ])}>\n  <Animated.View\n    style={{\n      transform: [{ translateX: this._transX, translateY: this._transY }],\n    }}\n  />\n</PanGestureHandler>\n```\n","type":"md","dependencies":[]},{"filepath":"pages/11.baseNodes/abs.md","title":"abs","description":"","link":"abs","data":"## `abs`\n\n```js\nabs(node);\n```\n\nEvaluates the given node and returns an absolute value of the node's value.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/acc.md","title":"acc","description":"","link":"acc","data":"## `acc`\n\n```js\nacc(node);\n```\n\nReturns an accumulated value of the given node. This node stores a sum of all evaluations of the given node and each time it gets evaluated it would add current node's value to that sum and return it.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/acos.md","title":"acos","description":"","link":"acos","data":"## `acos`\n\n```js\nacos(node);\n```\n\nReturns a arc-cosine of the value in radians of the given node\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/add.md","title":"add","description":"","link":"add","data":"## `add`\n\n```js\nadd(nodeOrNumber1, nodeOrNumber2, ...)\n```\n\nTakes two or more animated nodes or values, and when evaluated, returns their sum.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/and.md","title":"and","description":"","link":"and","data":"## `and`\n\n```js\nand(nodeOrValue1, ...)\n```\n\nActs as a logical `AND` operator. Takes one or more nodes as an input and evaluates them in sequence until some node evaluates to a \"falsy\" value. Then returns that value and stops evaluating further nodes. If all nodes evaluate to a \"truthy\" it returns the last node's value.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/asin.md","title":"asin","description":"","link":"asin","data":"## `asin`\n\n```js\nasin(node);\n```\n\nReturns a arc-sine of the value in radians of the given node\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/atan.md","title":"atan","description":"","link":"atan","data":"## `atan`\n\n```js\natan(node);\n```\n\nReturns a arc-tangent of the value in radians of the given node\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/block.md","title":"block","description":"","link":"block","data":"## `block`\n\n```js\nblock([node1, ...])\n```\n\nTakes an array of nodes and evaluates all of them in the order they are put in the array. It then returns the value of the last node.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/call.md","title":"call","description":"","link":"call","data":"## `call`\n\n```js\ncall(argsNodes, callback);\n```\n\nIf one of the nodes from `argsNodes` array updates, `callback` will be called in JavaScript with a list of current values of nodes from `argsNodes` array as the first argument.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/ceil.md","title":"ceil","description":"","link":"ceil","data":"## `ceil`\n\n```js\nceil(node);\n```\n\nReturns a node that rounds a number up to its nearest integer. If the passed argument is an integer, the value will not be rounded.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/clockRunning.md","title":"clockRunning","description":"","link":"clock-running","data":"## `clockRunning`\n\n```js\nclockRunning(clockNode);\n```\n\nFor a given `Clock` node, it returns `1` if the clock [has been started](start-clock.html) (if it's updating each frame) or returns `0` otherwise.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/color.md","title":"color","description":"","link":"color","data":"## `color`\n\n```js\ncolor(red, green, blue, alpha);\n```\n\nCreates a color node in RGBA format, where the first three input nodes should have _integer_ values in the range 0-255 (consider using `round` node if needed) and correspond to color components Red, Green and Blue respectively. Last input node should have a value between 0 and 1 and represents alpha channel (value `1` means fully opaque and `0` completely transparent). Alpha parameter can be ommited, then `1` (fully opaque) is used as a default.\n\nThe returned node can be mapped to view properties that represents color (e.g. [`backgroundColor`](https://facebook.github.io/react-native/docs/view-style-props.html#backgroundcolor)).\n\n##### Note: In order to interpolate color output values, use [`interpolateColors`](interpolate-colors.html) instead.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/concat.md","title":"concat","description":"","link":"concat","data":"## `concat`\n\n```js\nconcat(nodeOrValue1, ...)\n```\n\nReturns concatanation of given nodes (number or string) as string\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/cond.md","title":"cond","description":"","link":"cond","data":"## `cond`\n\n```js\ncond(conditionNode, ifNode, [elseNode]);\n```\n\nIf `conditionNode` evaluates to \"truthy\" value the node evaluates `ifNode` node and returns its value, otherwise it evaluates `elseNode` and returns its value. `elseNode` is optional.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/cos.md","title":"cos","description":"","link":"cos","data":"## `cos`\n\n```js\ncos(node);\n```\n\nReturns a cosine of the value (in radians) of the given node\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/debug.md","title":"debug","description":"","link":"debug","data":"## `debug`\n\n```js\ndebug(messageString, valueNode);\n```\n\nWhen the node is evaluated, it prints a string that contains the `messageString` concatenated with the value of `valueNode`. This then returns the value of `valueNode`. Logs are printed in the JS debugger if it's attached, in console if Expo client is being used, or else in the native console. Logs are visible only in `DEV` mode and have no effect on production builds. Note that `messageString` should be a normal string, not an animated node.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/defined.md","title":"defined","description":"","link":"defined","data":"## `defined`\n\n```js\ndefined(node);\n```\n\nReturns `1` if the given node evaluates to a \"defined\" value (that is to something that is non-null, non-undefined and non-NaN). Returns `0` otherwise.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/diff.md","title":"diff","description":"","link":"diff","data":"## `diff`\n\n```js\ndiff(node);\n```\n\nEvaluates node and returns a difference between value returned at the last time it was evaluated and its value at the current time. When evaluating for the first time it returns the node's value.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/diffClamp.md","title":"diffClamp","description":"","link":"diff-clamp","data":"## `diffClamp`\n\nWorks the same way as with the original `Animated` library.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/divide.md","title":"divide","description":"","link":"divide","data":"## `divide`\n\n```js\ndivide(nodeOrNumber1, nodeOrNumber2, ...)\n```\n\nTakes two or more animated nodes or values, and when evaluated, returns the result of dividing their values in the exact order.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/eq.md","title":"eq","description":"","link":"eq","data":"## `eq`\n\n```js\neq(nodeOrValueA, nodeOrValueB);\n```\n\nReturns `1` if the value of both nodes are equal. Otherwise returns `0`.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/event.md","title":"event","description":"","link":"event","data":"## `event`\n\nWorks the same way as with the original `Animated` library.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/exp.md","title":"exp","description":"","link":"exp","data":"## `exp`\n\n```js\nexp(node);\n```\n\nReturns an exponent of the value of the given node.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/floor.md","title":"floor","description":"","link":"floor","data":"## `floor`\n\n```js\nfloor(node);\n```\n\nReturns a node that rounds a number down to its nearest integer. If the passed argument is an integer, the value will not be rounded.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/greaterOrEq.md","title":"greaterOrEq","description":"","link":"greater-or-eq","data":"## `greaterOrEq`\n\n```js\ngreaterOrEq(nodeOrValueA, nodeOrValueB);\n```\n\nReturns `1` if the value of the first node is greater or equal to the value of the second node. Otherwise returns `0`.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/greaterThan.md","title":"greaterThan","description":"","link":"greater-than","data":"## `greaterThan`\n\n```js\ngreaterThan(nodeOrValueA, nodeOrValueB);\n```\n\nReturns `1` if the value of the first node is greater than the value of the second node. Otherwise returns `0`.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/interpolate.md","title":"interpolate","description":"","link":"interpolate","data":"## `interpolate`\n\n```js\ninterpolate(node, {\n  // Input range for the interpolation. Should be monotonically increasing.\n  inputRange: [nodeOrValue...],\n  // Output range for the interpolation, should be the same length as the input range.\n  outputRange: [nodeOrValue...],\n  // Sets the left and right extrapolate modes.\n  extrapolate?: Extrapolate.EXTEND | Extrapolate.CLAMP | Extrapolate.IDENTITY,\n  // Set the left extrapolate mode, the behavior if the input is less than the first value in inputRange.\n  extrapolateLeft?: Extrapolate.EXTEND | Extrapolate.CLAMP | Extrapolate.IDENTITY,\n  // Set the right extrapolate mode, the behavior if the input is greater than the last value in inputRange.\n  extrapolateRight?: Extrapolate.EXTEND | Extrapolate.CLAMP | Extrapolate.IDENTITY,\n})\n\nExtrapolate.EXTEND; // Will extend the range linearly.\nExtrapolate.CLAMP; // Will clamp the input value to the range.\nExtrapolate.IDENTITY; // Will return the input value if the input value is out of range.\n```\n\nMaps an input value within a range to an output value within a range. Also supports different types of extrapolation for when the value falls outside the range and mapping to strings. For example, if you wanted to animate a rotation you could do:\n\n```js\nconcat(\n  interpolate(node, { inputRange: [0, 360], outputRange: [0, 360] }),\n  'deg'\n);\n```\n\n##### Note: In order to interpolate color output values, use [`interpolateColors`](interpolate-colors.html) instead.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/interpolateColors.md","title":"interpolateColors","description":"","link":"interpolate-colors","data":"## `interpolateColors`\n\n```js\ninterpolateColors(node, {\n  // Input range for the interpolation. Should be monotonically increasing.\n  inputRange: [nodeOrValue, ...],\n\n  // Output colors range for the interpolation.\n  // Should be the same length as the input range.\n  //\n  // Each color should be a string like \"red\" \"#ff0\" \"#ff0000\" \"rgba(255, 0, 0, 1)\"\n  // or a number like `0xrrggbbaa`.\n  outputColorRange: [color, ...],\n})\n```\n\nMaps an input value within a range to an output value within a color range.\n\nExample:\n\n```js\nconst color = Animated.interpolateColors(node, {\n  inputRange: [0, 1],\n  outputColorRange: ['red', 'blue'],\n});\n\nreturn <Animated.View style={{ backgroundColor: color }} />;\n```\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/lessOrEq.md","title":"lessOrEq","description":"","link":"less-or-eq","data":"## `lessOrEq`\n\n```js\nlessOrEq(nodeOrValueA, nodeOrValueB);\n```\n\nReturns `1` if the value of the first node is less or equal to the value of the second node. Otherwise returns `0`.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/lessThan.md","title":"lessThan","description":"","link":"less-than","data":"## `lessThan`\n\n```js\nlessThan(nodeOrValueA, nodeOrValueB);\n```\n\nReturns `1` if the value of the first node is less than the value of the second node. Otherwise returns `0`.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/log.md","title":"log","description":"","link":"log","data":"## `log`\n\n```js\nlog(nodeOrNumber);\n```\n\nThe log of the given node.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/max.md","title":"max","description":"","link":"max","data":"## `max`\n\n```js\nmax(nodeOrValue1, nodeOrValue2);\n```\n\nTakes two nodes as an input and returns a maximum of all the node's values.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/min.md","title":"min","description":"","link":"min","data":"## `min`\n\n```js\nmin(nodeOrValue1, nodeOrValue2);\n```\n\nTakes two nodes as an input and returns a minimum of all the node's values.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/modulo.md","title":"modulo","description":"","link":"modulo","data":"<!-- TODO - need to explain -->\n\n## `modulo`\n\n```js\nmodulo(nodeOrNumber, nodeOrNumber);\n```\n\nRemainder after division of the first argument by the second one. modulo(a,0) will throw an error.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/multiply.md","title":"multiply","description":"","link":"multiply","data":"## `multiply`\n\n```js\nmultiply(nodeOrNumber1, nodeOrNumber2, ...)\n```\n\nTakes two or more animated nodes or values, and when evaluated, returns the result of multiplying their values in the exact order.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/neq.md","title":"neq","description":"","link":"neq","data":"## `neq`\n\n```js\nneq(nodeOrValueA, nodeOrValueB);\n```\n\nReturns `1` if the value of the first node is not equal to the value of the second node. Otherwise returns `0`.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/not.md","title":"not","description":"","link":"not","data":"## `not`\n\n```js\nnot(node);\n```\n\nReturns `1` if the given node evaluates to a \"falsy\" value and `0` otherwise.\n\n<!-- Derived -->\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/onChange.md","title":"onChange","description":"","link":"on-change","data":"## `onChange`\n\n```js\nonChange(value, action);\n```\n\nWhen evaluated, it will compare `value` to its previous value. If it has changed, `action` will be evaluated and its value will be returned.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/or.md","title":"or","description":"","link":"or","data":"## `or`\n\n```js\nor(nodeOrValue1, ...)\n```\n\nActs as a logical `OR` operator. Takes one or more nodes as an input and evaluates them in sequence until some node evaluates to a \"truthy\" value. Then returns that value and stops evaluating further nodes. If all nodes evaluate to a \"falsy\" value it returns the last node's value.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/pow.md","title":"pow","description":"","link":"pow","data":"## `pow`\n\n```js\npow(nodeOrNumber1, nodeOrNumber2, ...)\n```\n\nTakes two or more animated nodes or values, and when evaluated, returns the result of first node to the second node power. If more than two nodes are present, the result from the previous step is used as a base and the third node as exponent. This process continues onward for the following nodes if these are present.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/proc.md","title":"proc","description":"","link":"proc","data":"## `proc`\n\nReturns a callable function node that can be used to define expressions that can be called from other nodes.\n\nExample:\n\n```js\n// Global constant\nconst myProc = proc((a, b) => multiply(a, b));\n\n// In your component\nconst style = { width: myProc(10, 10) };\n```\n\nA proc node should be declared as a global constant in your code and not recreated from inside components.\n\nIt is not possible to reference nodes that are not passed as parameters.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/round.md","title":"round","description":"","link":"round","data":"## `round`\n\n```js\nround(node);\n```\n\nReturns a node that rounds input value to the nearest integer.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/set.md","title":"set","description":"","link":"set","data":"## `set`\n\n```js\nset(valueToBeUpdated, sourceNode);\n```\n\nWhen evaluated, it will assign the value of `sourceNode` to the `Animated.Value` passed as a first argument. In other words, it performs an assignment operation from the `sourceNode` to `valueToBeUpdated` value node and also returns a node that represents this value.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/sin.md","title":"sin","description":"","link":"sin","data":"## `sin`\n\n```js\nsin(node);\n```\n\nReturns a sine of the value (in radians) of the given node.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/sqrt.md","title":"sqrt","description":"","link":"sqrt","data":"<!- TODO - need to explain -->\n\n## `sqrt`\n\n```js\nsqrt(nodeOrNumber);\n```\n\nThe square root of the given node. If the number is negative, an error is thrown.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/startClock.md","title":"startClock","description":"","link":"start-clock","data":"## `startClock`\n\n```js\nstartClock(clockNode);\n```\n\nWhen evaluated, it will make `Clock` node passed as an argument start updating its value each frame. Then returns `0`.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/stopClock.md","title":"stopClock","description":"","link":"stop-clock","data":"## `stopClock`\n\n```js\nstopClock(clockNode);\n```\n\nWhen evaluated, it will make `Clock` node passed as an argument stop updating its value (if it has been doing that). Then returns `0`.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/sub.md","title":"sub","description":"","link":"sub","data":"## `sub`\n\n```js\nsub(nodeOrNumber1, nodeOrNumber2, ...)\n```\n\nTakes two or more animated nodes or values, and when evaluated, returns the result of subtracting their values in the exact order.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/tan.md","title":"tan","description":"","link":"tan","data":"## `tan`\n\n```js\ntan(node);\n```\n\nReturns a tangent of the value in radians of the given node\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/12.animations/decay.md","title":"decay","description":"","link":"decay","data":"## `decay`\n\n```js\ndecay(clock, { finished, velocity, position, time }, { deceleration });\n```\n\nUpdates `position` and `velocity` nodes by running a single step of animation each time this node evaluates. State variable `finished` is set to `1` when the animation gets to the final point (that is the velocity drops under the level of significance). The `time` state node is populated automatically by this node and refers to the last clock time this node got evaluated. It is expected to be reset each time we want to restart the animation. Decay animation can be configured using `deceleration` config param and it controls how fast the animation decelerates. The value should be between `0` and `1` but only values that are close to `1` will yield meaningful results.\n","type":"md","dependencies":[],"group":"Animations"},{"filepath":"pages/12.animations/spring.md","title":"spring","description":"","link":"spring","data":"## `spring`\n\n```js\nspring(\n  clock,\n  { finished, position, velocity, time },\n  {\n    damping,\n    mass,\n    stiffness,\n    overshootClamping,\n    restSpeedThreshold,\n    restDisplacementThreshold,\n    toValue,\n  }\n);\n```\n\nWhen evaluated, updates `position` and `velocity` nodes by running a single step of spring based animation. Check the original `Animated` API docs to learn about the config parameters like `damping`, `mass`, `stiffness`, `overshootClamping`, `restSpeedThreshold` and `restDisplacementThreshold`. The `finished` state updates to `1` when the `position` reaches the destination set by `toValue`. The `time` state variable also updates when the node evaluates and it represents the clock value at the time when the node got evaluated for the last time. It is expected that `time` variable is reset before spring animation can be restarted.\n","type":"md","dependencies":[],"group":"Animations"},{"filepath":"pages/12.animations/springUtils.md","title":"springUtils","description":"","link":"spring-utils","data":"## `SpringUtils`\n\nFor developers' convenience, it's possible to use a different way of configuring `spring` animation which follows behavior known from React Native core.\n\n### `SpringUtils.makeDefaultConfig()`\n\nReturns an object filled with default config of animation:\n\n```js\n {\n   stiffness: new Value(100),\n   mass: new Value(1),\n   damping: new Value(10),\n   overshootClamping: false,\n   restSpeedThreshold: 0.001,\n   restDisplacementThreshold: 0.001,\n   toValue: new Value(0),\n }\n```\n\n### `SpringUtils.makeConfigFromBouncinessAndSpeed(prevConfig)`\n\nTransforms an object with `bounciness` and `speed` params into config expected by the `spring` node. `bounciness` and `speed` might be nodes or numbers.\n\n### `SpringUtils.makeConfigFromOrigamiTensionAndFriction(prevConfig)`\n\nTransforms an object with `tension` and `friction` params into config expected by the `spring` node. `tension` and `friction` might be nodes or numbers.\n\nSee an [Example of different configs](https://github.com/software-mansion/react-native-reanimated/blob/master/Example/src/differentSpringConfigs/index.js).\n","type":"md","dependencies":[],"group":"Animations"},{"filepath":"pages/12.animations/timing.md","title":"timing","description":"","link":"timing","data":"## `timing`\n\n```js\ntiming(\n  clock,\n  { finished, position, frameTime, time },\n  { toValue, duration, easing }\n);\n```\n\nUpdates `position` node by running timing based animation from a given position to a destination determined by `toValue`. The animation is expected to last `duration` milliseconds and use `easing` function that could be set to one of the nodes exported by the `Easing` object.\nThe `frameTime` node will also get updated and represents the progress of animation in milliseconds (how long the animation has lasted so far), similar to the `time` node that just indicates the last clock time the animation node has been evaluated. Both of these variables are expected to be reset before restarting the animation. Finally `finished` node will be set to `1` when the position reaches the final value or when `frameTime` exceeds `duration`.\n","type":"md","dependencies":[],"group":"Animations"},{"filepath":"pages/13.declarative.md","title":"Declarative Animation API","description":"","link":"declarative-animation-api","data":"# Declarative Animation API\n\n---\n\nInvoking animation differs from the way it is done when using the original `Animated` API.\nHere, instead of having animation objects we operate on nodes that can perform single animation steps.\nIn order to map an animation into a value, we will make the value to be assigned to a node that among few other things will call into the animation step node. Check [`timing`](timing.html), [`decay`](decay.html) and [`spring`](spring.html) nodes documentation for some details about how animation step nodes can be configured.\n\nThe example below shows a component that renders:\n\n```js\nimport Animated, { Easing } from 'react-native-reanimated';\n\nconst {\n  Clock,\n  Value,\n  set,\n  cond,\n  startClock,\n  clockRunning,\n  timing,\n  debug,\n  stopClock,\n  block,\n} = Animated;\n\nfunction runTiming(clock, value, dest) {\n  const state = {\n    finished: new Value(0),\n    position: new Value(0),\n    time: new Value(0),\n    frameTime: new Value(0),\n  };\n\n  const config = {\n    duration: 5000,\n    toValue: new Value(0),\n    easing: Easing.inOut(Easing.ease),\n  };\n\n  return block([\n    cond(\n      clockRunning(clock),\n      [\n        // if the clock is already running we update the toValue, in case a new dest has been passed in\n        set(config.toValue, dest),\n      ],\n      [\n        // if the clock isn't running we reset all the animation params and start the clock\n        set(state.finished, 0),\n        set(state.time, 0),\n        set(state.position, value),\n        set(state.frameTime, 0),\n        set(config.toValue, dest),\n        startClock(clock),\n      ]\n    ),\n    // we run the step here that is going to update position\n    timing(clock, state, config),\n    // if the animation is over we stop the clock\n    cond(state.finished, debug('stop clock', stopClock(clock))),\n    // we made the block return the updated position\n    state.position,\n  ]);\n}\n\nexport class AnimatedBox extends Component {\n  // we create a clock node\n  clock = new Clock();\n  // and use runTiming method defined above to create a node that is going to be mapped\n  // to the translateX transform.\n  transX = runTiming(this.clock, -120, 120);\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Animated.View\n          style={[styles.box, { transform: [{ translateX: this.transX }] }]}\n        />\n      </View>\n    );\n  }\n}\n```\n\n## Backward compatible API\n\nAs it might sometimes be impractical to use the API above, there's an alternative way of invoking animation, which is similar to the original `Animated` API.\n\n```js\nclass Example extends Component {\n  constructor(props) {\n    super(props);\n    this._transX = new Value(0);\n    this._config = {\n      duration: 5000,\n      toValue: 120,\n      easing: Easing.inOut(Easing.ease),\n    };\n    this._anim = timing(this._transX, this._config);\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Animated.View\n          style={[styles.box, { transform: [{ translateX: this._transX }] }]}\n        />\n        <Button\n          onPress={() => {\n            this._anim.start();\n          }}\n          title=\"Start\"\n        />\n      </View>\n    );\n  }\n}\n```\n\nThis API gives the possibility to use animation with original `Animated` API. It's also a way of running animation on some interaction without necessity or rerendering view.\n","type":"md","dependencies":[]},{"filepath":"pages/15.example.md","title":"Examples","description":"","link":"examples","data":"# Examples\n\n---\n\nThe source code for the example (showcase) app is under the [`Example/`](https://github.com/software-mansion/react-native-reanimated/blob/master/Example/) directory.\n\nIn order to run it you need to run those commands (starting at main directory):\n\n```bash\n  yarn\n  cd Example\n  yarn\n  cd ios && pod install && cd .. # if using IOS devices\n  yarn start\n```\n\nThen run `react-native run-android` or `react-native run-ios` (depending on which platform you want to run the Example app on).\n\nYou will need to have an Android or iOS device or emulator connected as well as `react-native-cli` package installed globally.\n","type":"md","dependencies":[]}
]